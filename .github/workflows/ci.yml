name: üõ†Ô∏è CI

on:
  push:
    branches: [master]
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.4.0"

jobs:
  test-services:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        service: [order, product, chat]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          uv sync --all-extras

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          uv run pytest
        env:
          # Required for all services (especially chat)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

          # Service URLs for tests
          ORDER_MCP_URL: http://localhost:8002/mcp
          PRODUCT_MCP_URL: http://localhost:8003/mcp

          # Standard settings
          LOG_LEVEL: INFO

          # Chat-specific settings
          AGENT_MODEL: gpt-4o-mini
          CHAT_SESSION_TTL: 60
          CHAT_SESSION_STORE_PATH: /tmp/sessions

          # Tool settings (if you decide to use them)
          AGENT_TOOL_TIMEOUTS: 30
          AGENT_TOOL_RETRIES: 3
          AGENT_MAX_CONCURRENT_TOOLS: 5

  integration-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: test-services
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test data directories
        run: |
          mkdir -p data/chroma data/sessions
          # No need to copy - files are already in data/ from git checkout
          ls -la data/  # Verify files are there

      - name: Verify data files exist
        run: |
          test -f data/orders_cleaned.csv || (echo "‚ùå orders_cleaned.csv missing" && exit 1)
          test -f data/products_cleaned.csv || (echo "‚ùå products_cleaned.csv missing" && exit 1)
          echo "‚úÖ Data files verified"

      - name: Build Docker images
        run: |
          docker-compose build

      - name: Start services
        run: |
          docker-compose up -d
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to start..."

          # Health check with retries
          for i in {1..30}; do
            echo "Health check attempt $i/30"

            # Check each service
            ORDER_HEALTHY=false
            PRODUCT_HEALTHY=false
            CHAT_HEALTHY=false

            # Order service
            if curl -f http://localhost:8002/health 2>/dev/null; then
              echo "‚úÖ Order service healthy"
              ORDER_HEALTHY=true
            fi

            # Product service
            if curl -f http://localhost:8003/health 2>/dev/null; then
              echo "‚úÖ Product service healthy"
              PRODUCT_HEALTHY=true
            fi

            # Chat service
            if curl -f http://localhost:8001/health 2>/dev/null; then
              echo "‚úÖ Chat service healthy"
              CHAT_HEALTHY=true
            fi

            # All healthy?
            if [ "$ORDER_HEALTHY" = true ] && [ "$PRODUCT_HEALTHY" = true ] && [ "$CHAT_HEALTHY" = true ]; then
              echo "‚úÖ All services healthy!"
              break
            fi

            # Not ready yet
            if [ $i -eq 30 ]; then
              echo "‚ùå Services failed to start after 60 seconds"
              docker-compose logs
              exit 1
            fi

            sleep 2
          done

      - name: Verify MCP tool discovery
        run: |
          # Check that chat service can discover tools
          HEALTH_RESPONSE=$(curl -s http://localhost:8001/health)
          echo "Chat service health: $HEALTH_RESPONSE"

          # Optional: Check if tools are discovered (if exposed in health endpoint)
          # TOOL_COUNT=$(echo $HEALTH_RESPONSE | jq -r '.details.tool_count // 0')
          # if [ "$TOOL_COUNT" -gt "0" ]; then
          #   echo "‚úÖ MCP tools discovered: $TOOL_COUNT"
          # else
          #   echo "‚ö†Ô∏è No MCP tools discovered"
          # fi

      - name: Run smoke tests
        run: |
          # Test chat endpoint
          echo "Testing chat endpoint..."
          curl -X POST http://localhost:8001/chat \
            -H "Content-Type: application/json" \
            -d '{"message": "What tools do you have access to?"}' \
            | jq .

          # Test product search
          echo "Testing product search..."
          curl -X POST http://localhost:8003/search/semantic \
            -H "Content-Type: application/json" \
            -d '{"query": "headphones", "limit": 5}' \
            | jq .

          # Test order lookup
          echo "Testing order service..."
          curl http://localhost:8002/orders/customer/12345?limit=5 | jq .

      - name: Show logs on failure
        if: failure()
        run: |
          docker-compose logs --tail=100
