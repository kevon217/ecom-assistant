name: 🛠️ CI

on:
  push:
    branches: [master]
  pull_request:

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.4.0"

jobs:
  test-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [order, product, chat]
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install dependencies
        run: |
          cd services/${{ matrix.service }}
          uv sync

      - name: Create test MCP config (chat service only)
        if: matrix.service == 'chat'
        run: |
          # Create config in repo root where chat service expects it
          cat > mcp_agent.config.yaml << EOF
          servers:
            - name: order-service
              type: sse
              url: http://localhost:8002/mcp
              cache_tools_list: true
            - name: product-service
              type: sse
              url: http://localhost:8003/mcp
              cache_tools_list: true
          agent:
            model: gpt-4o-mini
            max_concurrent_tools: 5
            tool_retries:
              default: 2
            tool_timeouts:
              default: 30
          EOF

      - name: Run tests
        run: |
          cd services/${{ matrix.service }}
          uv run pytest
        env:
          # Exact environment variable names for Pydantic
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ORDER_MCP_URL: http://localhost:8002/mcp
          PRODUCT_MCP_URL: http://localhost:8003/mcp
          AGENT_TOOL_RETRIES_DEFAULT: 2
          AGENT_TOOL_TIMEOUTS_DEFAULT: 30

  integration-test:
    runs-on: ubuntu-latest
    needs: test-services
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test data
        run: |
          mkdir -p data/chroma data/processed/latest data/sessions
          # Copy minimal test data if available
          if [ -d "tests/fixtures" ]; then
            cp tests/fixtures/test_*.csv data/processed/latest/ || true
          fi

      - name: Create MCP config
        run: |
          cat > mcp_agent.config.yaml << EOF
          servers:
            - name: order-service
              type: sse
              url: http://order-service:8002/mcp
              cache_tools_list: true
            - name: product-service
              type: sse
              url: http://product-service:8003/mcp
              cache_tools_list: true
          agent:
            model: gpt-4o-mini
            max_concurrent_tools: 5
            tool_retries:
              default: 2
            tool_timeouts:
              default: 30
          EOF

      - name: Start services and test
        run: |
          # Start services in background
          docker-compose up -d

          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 45

          # Test health endpoints with retries
          for i in {1..5}; do
            echo "Health check attempt $i"

            # Check individual services
            curl -f http://localhost:8002/health && echo "✅ Order service healthy"
            curl -f http://localhost:8003/health && echo "✅ Product service healthy"
            curl -f http://localhost:8001/health && echo "✅ Chat service healthy"

            # Check tool discovery (critical test)
            TOOL_COUNT=$(curl -s http://localhost:8001/health | jq -r '.details.tool_count // 0')
            echo "Tool count: $TOOL_COUNT"

            if [ "$TOOL_COUNT" -gt "0" ]; then
              echo "✅ MCP tool discovery working"
              break
            else
              echo "❌ No tools discovered, retrying..."
              sleep 10
            fi
          done

          # Final validation
          if [ "$TOOL_COUNT" -eq "0" ]; then
            echo "❌ Tool discovery failed after retries"
            docker-compose logs chat-service
            exit 1
          fi

        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          # Exact environment variable names
          AGENT_TOOL_RETRIES_DEFAULT: 2
          AGENT_TOOL_TIMEOUTS_DEFAULT: 30
