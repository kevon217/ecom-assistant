Story,Task,Estimate min (hr),Estimate max (hr),Actual,Comment,Tags,Proposed Version,Post Mortem Notes
Exploratory Data Analysis,Exploratory data profiling and analysis,1,2,4,"Use ydata-profiling to investigate data: types, missing values, distributions, formats, cleaning considerations, etc.",EDA,v0.0,"had a bunch of ideas for EDA, but then I realized I was spending way too much time on just this step so went pretty basic and standard."
System Design & Stack,Design microservices architecture and communication protocols,3,7,55,"Define service boundaries, API contracts, and data flows.

Research & select tech stack: OpenAI Agents SDK, FastAPI-MCP for service communication,  FastAPI for services, ChromaDB for semantic search over product catalog, Docker, GitHub Actions, Render deployment, Postman testing, and Gradio UI.

Design session flow and context propagation strategy.",Foundation,v0.1,"initially started this work with much simpler and basic approach of manually handling function calls and simple FAISS index for semantic search and got things working, but then decided i might as well use this opportunity to get more familiar with latest updates with openai-agents sdk and the MCP rage.

getting things wired up took me an obscene amount of troubleshooting and re-writing. bit off a lot to chew and definitely went down some rabbit holes, but feel good about being able to connect these pieces."
Data Cleaning & Prep,Clean and prepare datasets for services,2,4,5,"Standardize formats, handle missing values, prep text for vector embeddings strategies, and prep CSVs for ingestion into services.",Data Prep,v0.2,"decided to not get bogged down in this so there’s still a lot left to be desired and optimized.

really wanted to actually experiment more here with different preprocessing strategies and embedding optimization."
Project Setup,Set up repository structure and development environment,2,3,3,"Create service directories, configure uv/pre-commit, setup basic health endpoints and logging, and set up the shared/ package (config, context, guardrails, health, logging, middleware).",Foundation,v0.3,"created micro services architecture layout.

added a shared lib that definitely could be expanded. may be useful for more sophisticated usage of openai-agents sdk, e.g., handoffs, guardrails, tracing, etc.

didn’t spend much time on implementing good logging, guardrails or middleware but would definitely add that if this was for actual product or client."
Order Service,Implement order service with MCP integration,2,4,4,"Create order service with data service layer, FastAPI endpoints and MCP tool exposure.",Order Service,v0.4,"decided to beef up the mock_api. wanted to separate the business logic into a data service layer. also added some additional business logic to order service.

getting the MCP properly situated and tested took some time."
Product Service,Implement product service with vector search,4,6,10,"Create product service with ChromaDB integration, data service layer, search endpoints and MCP tools.",Product Service,v0.5,"hit some snags with proper data service layer and chromadb utilization.

did a lot of redesigns here. ended up simplifying my initial implementations a lot and leaning more into the pydantic models here to afford the LLM some flexibility and creativity for wielding tools and optimizing parameters. i also thought it also was important to allow the LLM to query metadata and get some sense of data landscape to better inform queries, filters, and search logic."
Chat Service Core,Implement chat service with session management,2,4,4,Create chat endpoints with session store and basic validation.,Chat Service,v0.6,basic chat endpoint was not too bad.
Agent & Streaming,Configure agent and implement real-time features,2,4,20,Set up OpenAI Agents SDK integration and SSE streaming.,Chat Service,v0.7,"this was the biggest obstacle and took quite some time debugging when working on pytests and testing locally with docker.

the orchestrator approach took some finessing. definitely got ahead of myself trying to get fancy with that part.

was able to get the event logic working to stream back updates to user while actions were being taken, although still some massaging and aesthetics to apply to that, but bones are there."
Parallel Processing,Implement parallel tool calls,2,4,2,Enable concurrent MCP requests and handle error conditions.,Integration,v0.8,"the stack of openai-agents, openai-agents-mcp, and fastapi-mcp allowed me to not have to worry much about concurrency. though still some error conditions and testing that could be done. chat app and orchestrator have a lot of bandaids and half-baked solutions. still fragile, hard-coded settings baked in, and doesn’t fully leverage OpenAI Agents SDK features."
Quality & Testing,Implement guardrails and core test suite,3,5,6,"Add input/output guardrails, observability hooks, unit and end-to-end tests (including a full chat flow).",Testing,v0.9,"didn't spend much time on guardrails (besides basic limits and pydantic validation) or observability hooks, but could add those layers on later utilizing openai-sdk features or pydantic log fire or something.

spent time here fleshing out and iterating on Postman collection to verify challenge requirements met and ensure system robustness and stability. only few fails occur stochastically and are more a consequence of hastily thrown together and brittle Postman test logic and not system failure."
Bonus UI Implementation,Implement chat interface with Gradio,1,2,1.5,Build a lightweight Gradio app to interact with chat service and render any tabular tool outputs.,UI,v1.0,"would love to have implemented this and wouldn’t be difficult now that I have things wired up. plan was to provide standard chat interface, enable real-time event updates for user (e.g., searching for medium guitar strings…, now searching for blah blah blah) and also have panel on side with data frame display and history of data displayed that user could copy/paste if they wanted or export. drew up plans then realized this was going to be another time sink."
Deployment,Set up deployment pipeline and infrastructure,2,4,10,"Configure Docker, CI/CD,  and deploy to Render.",Deployment,v1.1,"rebuilding ChromaDB with updates is not ideal, but didn’t want to overoptimism that aspect of things for this project.

lots of headaches using Render for first time. app performance and stability severely constrained by Render free plan (512 MB RAM; 0.1 cpu) due to ChromaDB vector store and querying. was very difficult to troubleshoot as things worked fine in local Docker, but Render specific quirks and free plan made debugging/troubleshooting more challenging."
Documentation,Create system documentation and examples,1,2,6,"Document architecture, API specs, usage examples, and developer setup steps.",Documentation,v1.2,"reflecting on the above work, the actual time spent severely underestimate the amount of real estate occupied and mental energy exerted within my head for this project. "
